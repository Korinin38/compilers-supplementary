-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  case expr of
    Assn(l, r)        -> case evalList (c, { l, r }) of [[s, w], { l, r }] -> [[s <- [l, r], w], r] esac
  | Seq(l, r)         -> case evalList (c, { l, r }) of [c, { _, r }] -> [c, r] esac
  | Skip              -> [c, Z]
  | Read (v)          -> case readWorld (w) of [x, w] -> [[s <- [v, x], w], Z] esac
  | Write (e)         -> case eval (c, e) of [[s, w], x] -> [ [s, writeWorld (x, w)], Z ] esac
  | If (cond, t, e)   -> case eval (c, cond) of [c, cond] -> if cond then eval (c, t) else eval (c, e) fi esac
  | While (cond, b)   -> case eval (c, cond) of [c, cVal] -> if cVal then eval (c, Seq(b, expr)) else [c, Z] fi esac
  | DoWhile (b, cond) -> eval (c, Seq (b, While (cond, b)))
  | Var (v)           -> [c, s(v)]
  | Ref (ex)          -> [c, ex]
  | Const (x)         -> [c, x]
  | Binop(op, l, r)   -> case evalList (c, {l, r}) of [c, {l, r}] -> [c, evalOp(op, l, r)] esac
  | Ignore (ex)       -> case eval (c, ex) of [c, _] -> [c, Z] esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
