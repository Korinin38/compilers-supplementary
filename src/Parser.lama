-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (
      {
        [Left, {[s ("!!"), fun (l, op, r) { Binop (op, l, r) }]}],
        [Left, {[s ("&&"), fun (l, op, r) { Binop (op, l, r) }]}],
        [Nona, {[s ("=="), fun (l, op, r) { Binop (op, l, r) }],
                [s ("!="), fun (l, op, r) { Binop (op, l, r) }],
                [s (">"),  fun (l, op, r) { Binop (op, l, r) }],
                [s ("<"),  fun (l, op, r) { Binop (op, l, r) }],
                [s (">="), fun (l, op, r) { Binop (op, l, r) }],
                [s ("<="), fun (l, op, r) { Binop (op, l, r) }]}],
        [Left, {[s ("+"), fun (l, op, r) { Binop (op, l, r) }],
                [s ("-"), fun (l, op, r) { Binop (op, l, r) }]}],
        [Left, {[s ("*"), fun (l, op, r) { Binop (op, l, r) }],
                [s ("/"), fun (l, op, r) { Binop (op, l, r) }],
                [s ("%"), fun (l, op, r) { Binop (op, l, r) }]}]
      }, primary);

var simpleStmt = memo $ eta syntax(
  kSkip                                      { Skip } |
  x=lident s[":="] e=exp               { Assn(x, e) } |
  kRead x=inbr[s("("), lident, s(")")]    { Read(x) } |
  kWrite e=inbr[s("("), exp, s(")")]     { Write(e) }
),
    stmt = memo $ eta syntax ( simpleStmt | s1=simpleStmt s[";"] s2=stmt { Seq(s1,s2) } );
-- var stmt = memo $ eta (failure ("statement parsing not implemented\n"));
   

-- Public top-level parser
public parse = stmt;
             
